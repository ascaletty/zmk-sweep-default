/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;

    bindings = <&kp>, <&kp>;

    tapping-term-ms = <300>;
    flavor = "tap-preferred";
};

&sk { ignore-modifiers; };

&mmv {
    time-to-max-speed-ms = <210>;
    acceleration-exponent = <1>;
    delay-ms = <0>;
};

/ {
    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp LALT &kp RALT &kp LGUI &kp RGUI &kp ASTERISK>;
        };

        numwordandlayer1: numwordandlayer1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&numword &to 1>;
            label = "NUMWORDANDLAYER1";
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys

        combo_sym2 {
            timeout-ms = <200>;
            key-positions = <31 33>;
            bindings = <&to 1>;
        };

        // both left thumb keys

        combo_settings {
            timeout-ms = <300>;
            key-positions = <30 31>;
            bindings = <&mo 3>;
        };

        home_panic {
            bindings = <&to 0>;
            key-positions = <31 32>;
            layers = <1 5 0>;
        };

        nav {
            bindings = <&to 0>;
            key-positions = <30 33>;
        };

        fnc {
            bindings = <&mo 2>;
            key-positions = <32 33>;
        };
    };

    behaviors {
        pinkyhm: pinkyhm {
            compatible = "zmk,behavior-hold-tap";
            label = "PINKYHM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <350>;
            quick-tap-ms = <(-1)>;
            require-prior-idle-ms = <(-1)>;
            flavor = "tap-preferred";
        };

        underscore: underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSCORE";
            bindings = <&kp SQT>, <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        dashandqoutes: dashandqoutes {
            compatible = "zmk,behavior-mod-morph";
            label = "DASHANDQOUTES";
            bindings = <&kp MINUS>, <&kp DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        apostrophe: apostrophe {
            compatible = "zmk,behavior-tap-dance";
            label = "APOSTROPHE";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&to 1>;
        };

        comma: comma {
            compatible = "zmk,behavior-tap-dance";
            label = "COMMA";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&numwordandlayer1>;

            tapping-term-ms = <250>;
        };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings = <&kp SLASH>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        numword: numword {
            compatible = "zmk,behavior-caps-word";
            label = "NUMWORD";
            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_LALT|MOD_RCTL|MOD_RSFT|MOD_RALT)>;
            continue-list = <NUMBER_1 NUMBER_2 NUMBER_3 NUMBER_4 NUMBER_5 NUMBER_6 NUMBER_7 NUMBER_8 NUMBER_9 NUMBER_0 PERIOD LEFT_PARENTHESIS RIGHT_PARENTHESIS RIGHT_BRACKET LEFT_BRACKET LEFT_BRACE RIGHT_BRACE QUESTION BACKSPACE GRAVE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        graphite {
            bindings = <
&kp B                &kp L  &kp D             &kp W               &kp Z        &underscore  &kp F                &kp O             &kp U           &kp J
&pinkyhm LEFT_WIN N  &kp R  &mt LEFT_SHIFT T  &mt LEFT_CONTROL S  &kp G        &kp Y        &mt RIGHT_CONTROL H  &mt LEFT_SHIFT A  &kp E           &pinkyhm LEFT_GUI I
&kp Q                &kp X  &kp M             &kp C               &kp V        &kp K        &kp P                &kp DOT           &dashandqoutes  &slash
                                              &kp ENTER           &kp SPACE    &kp BSPC     &comma
            >;
        };

        numpad {
            bindings = <
&kp NUMBER_1      &kp NUMBER_2  &kp NUMBER_3       &kp NUMBER_4           &kp N5                  &kp NUMBER_6   &kp N7  &kp N8  &kp N9  &kp N0
&mt LSHIFT GRAVE  &kp QUESTION  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp SEMICOLON           &kp EQUAL      &kp N4  &kp N5  &kp N6  &kp RSHIFT
&kp LEFT_CONTROL  &kp LALT      &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp NON_US_BACKSLASH    &kp MINUS      &kp N1  &kp N2  &kp N3  &kp PERIOD
                                                   &to 0                  &mt ENTER SPACE         &kp BACKSPACE  &kp N0
            >;
        };

        fnc_layer {
            bindings = <
&kp F1    &kp F2    &kp F3      &kp F4     &kp F5      &kp F6   &kp F7   &kp F8           &kp F9  &kp F10
&sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT    &kp F11  &kp F12  &kp PRINTSCREEN  &trans  &trans
&none     &none     &none       &none      &none       &none    &none    &none            &none   &none
                                &none      &none       &none    &none
            >;
        };

        settings_layer {
            bindings = <
&bootloader  &none  &none  &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&to 5        &none  &none  &none       &bt BT_SEL 1    &bt BT_SEL 4  &none  &none     &none  &none
&none        &none  &none  &none       &bt BT_SEL 2    &bt BT_SEL 5  &none  &none     &none  &none
                           &none       &none           &none         &none
            >;
        };

        default_layer {
            bindings = <
&mt ESCAPE Q         &kp W  &kp E         &kp R               &kp T        &kp Y          &kp U               &kp I         &kp O    &kp P
&pinkyhm LEFT_WIN A  &kp S  &mt LSHIFT D  &mt LEFT_CONTROL F  &kp G        &kp H          &mt LEFT_CONTROL J  &mt LSHIFT K  &kp L    &pinkyhm LEFT_WIN SEMICOLON
&mt TAB Z            &kp X  &kp C         &kp V               &kp B        &kp N          &kp M               &kp COMMA     &kp DOT  &kp SLASH
                                          &lt 2 ENTER         &kp SPACE    &kp BACKSPACE  &apostrophe
            >;
        };

        gaming_layer {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E  &kp R               &none  &none  &none  &none  &none
&kt LEFT_SHIFT    &kp A  &kp S  &kp D  &kt LEFT_SHIFT      &none  &none  &none  &none  &none
&kt LEFT_CONTROL  &kp Z  &kp X  &kp C  &kt LEFT_CONTROL    &none  &none  &none  &none  &none
                                &none  &kp SPACE           &none  &none
            >;
        };

        layer_6 {
            bindings = <
&trans       &trans          &mmv MOVE_UP    &kp LC(TAB)      &trans    &trans    &mkp LCLK     &mkp RCLK  &trans     &trans
&kp RA(TAB)  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans    &kp LEFT  &kp UP_ARROW  &kp DOWN   &kp RIGHT  &trans
&trans       &trans          &trans          &trans           &trans    &trans    &trans        &trans     &trans     &trans
                                             &trans           &trans    &trans    &trans
            >;
        };
    };
};
